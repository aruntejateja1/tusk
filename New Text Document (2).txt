import java.util.LinkedHashSet;
  
class GFG
{
// Function to check if the given 
// number has repeated digit or not 
static int repeated_digit(int n) 
{
    LinkedHashSet<Integer> s = new LinkedHashSet<>();
  
    // Traversing through each digit 
    while (n != 0) 
    {
        int d = n % 10;
  
        // if the digit is present 
        // more than once in the 
        // number 
        if (s.contains(d))
        {
            // return 0 if the number 
            // has repeated digit 
            return 0;
        }
        s.add(d);
        n = n / 10;
    }
      
    // return 1 if the number has 
    // no repeated digit 
    return 1;
}
  
// Function to find total number 
// in the given range which has 
// no repeated digit 
static int calculate(int L, int R) 
{
    int answer = 0;
  
    // Traversing through the range 
    for (int i = L; i < R + 1; ++i) 
    {
  
        // Add 1 to the answer if i has 
        // no repeated digit else 0 
        answer = answer + repeated_digit(i);
    }
  
    return answer;
}
  
// Driver Code 
public static void main(String[] args) 
{
    int L = 1, R = 100;
      
    // Calling the calculate 
    System.out.println(calculate(L, R));
}
}










#include<stdio.h>
int main() {
    int n1,n2;
    scanf("%d\n%d",&n1,&n2);
    if(n1>=n2){
        printf("Invalid input");
        
    }else if(n1<10 && n2<10){
        printf("%d\n",n2-n1);
    }
    else if(n1<10 && n2>10){
        int z[];
        for(int i=n1;i<=n2;i++){
        }

        }
        
        
        
        printf("%d\n",n2-n1);
    }
    printf("Hello world\n");
    return 0;
    
}